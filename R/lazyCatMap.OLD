#'Some
#'
#'
#' @export
lazyCatMap<-function (fn_srt){
  eachValue<-raster::unique(fn_srt)
  eachValue<-eachValue[eachValue!=0]
  totalObjects<-length(eachValue)
  passPoly<-0
  rejectPoly<-0
  remainingObject<-totalObjects
  startTime<-Sys.time()
  polyList<-sapply(eachValue,function(x){
    cat(paste0('Total objects to parse: ',
               formatC(totalObjects,digits = 6,flag='0'),
               ' | ',
               formatC(remainingObject,digits = 6,flag='0'),
               ' | accepted: ',
               formatC(passPoly,digits = 6,flag='0'),
               ' | rejected: ',
               formatC(rejectPoly,digits = 6,flag='0'),
               '\r'))
    polyG<-raster::rasterToPolygons(fn_srt,fun=function(srt){srt==x})
    polyG<-sf::st_as_sf(polyG)
    polyG<-sf::st_union(polyG)
    polyG<-unlist(polyG,recursive=T)
    polyG<-matrix(polyG,ncol=2,byrow = F)
    colnames(polyG)<-c('x','y')
    tryIt<-try(sf::st_polygon(list(polyG)),silent = T)
    if (inherits(tryIt,'try-error')) {
      polyG<-NA
      rejectPoly<<-rejectPoly+1
    } else {passPoly<<-passPoly+1}
    remainingObject<<-remainingObject-1
    return(polyG)
  },USE.NAMES = T,simplify = F)
  cat(paste0('Total objects to parse: ',
             formatC(totalObjects,digits = 6,flag='0'),
             ' | ',
             formatC(remainingObject,digits = 6,flag='0'),
             ' | accepted: ',
             formatC(passPoly,digits = 6,flag='0'),
             ' | rejected: ',
             formatC(rejectPoly,digits = 6,flag='0'),
             '\n'))
  polyList<-polyList[!is.na(polyList)]
  stopTime<-Sys.time()
  segmentationOut<-new('IMC_Segmentation',
                       polygons=polyList,
                       performance=data.frame(
                         total=totalObjects,
                         accepted=passPoly,
                         rejected=rejectPoly,
                         elapsed=stopTime-startTime),
                       raster=fn_srt)
  return(segmentationOut)
}



