#' @export
nameIT <- function(fn_exprs,
                   fn_Xclass,
                   fn_Yclass,
                   fn_dimToPlot,
                   fn_transform = scales::modulus_trans(-1,1),
                   fn_Newclass = 'newClass',
                   fn_undefined = 'UNDF') {

  newExprs<-sf::st_drop_geometry(fn_exprs)

  Xlevels<-sort(unique(as.character(newExprs[,fn_Xclass])))
  Ylevels<-sort(unique(as.character(newExprs[,fn_Yclass])))

  newExprs[,fn_Xclass]<-factor(newExprs[,fn_Xclass],levels = Xlevels)
  newExprs[,fn_Yclass]<-factor(newExprs[,fn_Yclass],levels = Ylevels)

  labelClash<-newExprs[,c(fn_Xclass,fn_Yclass)]

  labelCross<-list()

  tLabelClash<-table(labelClash)

  labelCross[['column']]<-apply(tLabelClash,2,function(x){x/sum(x)})
  labelCross[['row']]<-t(apply(tLabelClash,1,function(x){x/sum(x)}))
  labelCross[['total']]<-matrix(tLabelClash/sum(tLabelClash),
                                nrow=length(Xlevels),
                                ncol=length(Ylevels),
                                dimnames = list(Xlevels,Ylevels))


  medianNewExprs<-aggregate(newExprs[,fn_dimToPlot,drop=F],by=list(newExprs[,fn_Xclass],newExprs[,fn_Yclass]),FUN=median,drop = F)
  medianNewExprs[is.na(medianNewExprs)]<-0
  colnames(medianNewExprs)[1:2]<-c(fn_Xclass,fn_Yclass)

  TEMP<-sapply(fn_dimToPlot,function(dTp){

    focusColumn<-fn_transform$transform(medianNewExprs[,dTp])
    focusColumn<-focusColumn/max(focusColumn)
    out<-matrix(focusColumn,
                nrow = length(Xlevels),
                ncol = length(Ylevels),
                dimnames = list(Xlevels,Ylevels),
                byrow = F)
  },USE.NAMES = T,simplify = F)

  labelCross<-append(labelCross,TEMP)


  labelCross<-sapply(labelCross,function(x){
    Rowv <- as.dendrogram(hclust(dist(x)))
    rowInd <- order.dendrogram(Rowv)
    Colv <- as.dendrogram(hclust(dist(t(x))))
    colInd <- order.dendrogram(Colv)
    x<-x[rowInd,colInd]
    return(x)
  },USE.NAMES = T,simplify = F)


  labelCross_long<-expand.grid(rev(rownames(labelCross[['row']])),colnames(labelCross[['row']]))
  numberCross_long<-expand.grid(seq_along(rownames(labelCross[['row']])),seq_along(colnames(labelCross[['row']])))

  colnames(labelCross_long)<-c(fn_Xclass,fn_Yclass)
  labelCross_long[,fn_Xclass]<-factor(labelCross_long[,fn_Xclass],levels = Xlevels)
  labelCross_long[,fn_Yclass]<-factor(labelCross_long[,fn_Yclass],levels = Ylevels)

  colnames(numberCross_long)<-c('Y','X')
  labelCross_long<-cbind.data.frame(labelCross_long,
                                    crossLabel = paste(labelCross_long[,fn_Xclass],
                                                       labelCross_long[,fn_Yclass],
                                                       sep = ' x '),
                                    numberCross_long,
                                    perc = as.vector(labelCross[['row']]))

  labelCross_def<-cbind.data.frame(labelCross_long[,c(fn_Xclass,
                                                      fn_Yclass,
                                                      'crossLabel')],
                                   NC = fn_undefined)
  colnames(labelCross_def)[4]<-fn_Newclass

  exprs_long<-newExprs[,c(fn_Xclass,fn_Yclass,fn_dimToPlot)]
  exprs_long<-as.data.frame(tidyr::pivot_longer(data = exprs_long,
                                                cols = fn_dimToPlot,
                                                names_to = 'marker',
                                                values_to = 'MFI'))

  exprs_long<-dplyr::left_join(exprs_long,
                               labelCross_long[,c(fn_Xclass,
                                                  fn_Yclass,
                                                  'crossLabel',
                                                  'Y',
                                                  'X')],
                               by = c(fn_Xclass,fn_Yclass))




  server <- function(input, output, session) {


    ##### set reactive values #####

    rv_plotMap<-shiny::reactiveValues(map = raster::raster(labelCross[['row']],
                                                           xmn=0,
                                                           xmx=0+ncol(labelCross[['row']]),
                                                           ymn=0,
                                                           ymx=0+nrow(labelCross[['row']])),
                                      df = labelCross_long,
                                      newLab = labelCross_def,
                                      newLabSub =NULL,
                                      select = NULL,
                                      selectCol = NULL,
                                      selectLab = NULL,
                                      selectCrossLabel = NULL)

    rv_plotProfile<-shiny::reactiveValues(original = as.data.frame(exprs_long),
                                          sub = NULL)

    ##### set origin for heatmap #####

    shiny::observeEvent(input$killIt,{
      rv_plotMap$select <- NULL
      rv_plotMap$selectCol <- NULL
      rv_plotMap$selectLab <- NULL
      rv_plotMap$selectCrossLabel <- NULL
    })

    ##### set origin for heatmap #####

    shiny::observeEvent(input$mapOrigin,{
      rv_plotMap$map<-raster::raster(labelCross[[input$mapOrigin]],
                                     xmn=0,
                                     xmx=0+ncol(labelCross[[input$mapOrigin]]),
                                     ymn=0,
                                     ymx=0+nrow(labelCross[[input$mapOrigin]]))

      xlab<-colnames(labelCross[[input$mapOrigin]])
      ylab<-rev(rownames(labelCross[[input$mapOrigin]]))


      if (!is.null(rv_plotMap$selectLab)){
        rv_plotMap$select<-t(apply(rv_plotMap$selectLab,1,function(x){
          xInd<-which(xlab == x[1],arr.ind = T)
          yInd<-which(ylab == x[2],arr.ind = T)
          return (c(xInd,yInd))
        }))
      }
    })


    ##### I/O file #####
    shiny::observeEvent(input$defUp,{
      rv_plotMap$newLab<-read.table(input$defUp$datapath,
                                    header = T,
                                    as.is = T,
                                    check.names = F,
                                    stringsAsFactors = T)
    })

    output$defDown <- shiny::downloadHandler(

      filename =function() 'table.txt',
      content = function(file) {
        write.table(rv_plotMap$newLab,file,append = F,row.names = F)
      }
    )




    ##### plot heatmap #####

    output$plotMap<-shiny::renderPlot({

      par(cex.axis = 0.8,
          las = 2)
      raster::image(rv_plotMap$map,
                    ann = F,
                    axes = F,
                    col = scales::colour_ramp(c('blue','white','red'))((0:255)/255))

      ylab<-rev(rownames(labelCross[[input$mapOrigin]]))
      xlab<-colnames(labelCross[[input$mapOrigin]])

      msk<-sapply(rev(ylab),function(y){
        sapply(xlab,function(x){
        out<-rv_plotMap$newLab[rv_plotMap$newLab[,fn_Xclass]==y &
                          rv_plotMap$newLab[,fn_Yclass]==x,fn_Newclass]

        if (out==fn_undefined) out<-'NA' else out<-rgb(0,1,0,0.5)
        return(out)
      },USE.NAMES = F,simplify = F)
        },USE.NAMES = F,simplify = F)

      msk<-unlist(msk,recursive = T)
      # lnwdt<-vector(mode='numeric',length = length(xlab)*length(ylab))
      # lnwdtInd<-1
      # for (y in rev(ylab)){
      #   for (x in xlab){
      #     out<-rv_plotMap$newLab[rv_plotMap$newLab[,fn_Xclass]==y &
      #                              rv_plotMap$newLab[,fn_Yclass]==x,fn_Newclass]
      #
      #     if (out==fn_undefined) lnwdt[lnwdtInd]<-NA else lnwdt[lnwdtInd]<-'yellow'
      #     lnwdtInd=lnwdtInd+1
      #   }
      # }

# browser()
      raster::plot(raster::rasterToPolygons(rv_plotMap$map),add=T,col=msk)
      points(rv_plotMap$select-c(0.5,0.5),
             bg = rv_plotMap$selectCol,
             pch = 22,
             col = 'black',
             lwd=1,
             cex = 2)

      axis(2, at=seq_along(ylab)-0.5, labels=ylab)
      axis(1, at=seq_along(xlab)-0.5, labels=xlab)
    })

    ##### plot density #####
    output$plotPlot<-shiny::renderPlot({

      # selectCase<-apply(rv_plotMap$select,1,function(sC){
      #   rv_plotMap$df[(rv_plotMap$df$Y == sC[2] &
      #                    rv_plotMap$df$X == sC[1])
      #                 ,c(fn_Yclass,fn_Xclass)]
      # })
      # selectCase<-do.call(rbind.data.frame,selectCase)
      #
      #
      # sub_plot<-apply(selectCase,1,function(sC){
      #   rv_plotProfile$original[rv_plotProfile$original[,fn_Yclass] == sC[fn_Yclass] &
      #                             rv_plotProfile$original[,fn_Xclass] == sC[fn_Xclass],]
      # })
      #
      # sub_plot<-do.call(rbind.data.frame,sub_plot)

      sub_plot<-rv_plotProfile$original[rv_plotProfile$original$crossLabel %in% as.vector(rv_plotMap$selectCrossLabel),]


      ggplot2::ggplot(rv_plotProfile$original)+
        ggplot2::geom_density(data = sub_plot,mapping = ggplot2::aes(x=MFI,y=..scaled..,col=crossLabel))+
        ggplot2::scale_x_continuous(trans=fn_transform,)+
        ggplot2::scale_color_manual(values = rv_plotMap$selectCol,
                                    breaks = rv_plotMap$selectCrossLabel,
                                    guide = ggplot2::guide_legend(override.aes = list(fill = rv_plotMap$selectCol) ))+
        ggplot2::facet_wrap(facets='marker',
                            scales  = 'free_x')+
        ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'),
                       panel.grid = ggplot2::element_line(color = 'gray20',
                                                          linetype = 3))


    }
    # ,width = 300,height = 150*length(fn_dimToPlot),res = 72
    )


    ##### selection table #####

    shiny::observeEvent(rv_plotMap$selectCrossLabel,{
      rv_plotMap$newLabSub <- rv_plotMap$newLab[rv_plotMap$newLab$crossLabel %in% rv_plotMap$selectCrossLabel, ]
    })

    output$dtNewDef<-DT::renderDT(DT::formatStyle(
      table = DT::datatable(rv_plotMap$newLabSub,
                            editable = 'cell',
                            selection = 'single'
      ),
      columns = 3,
      target = 'cell',
      backgroundColor = DT::styleEqual(levels = rv_plotMap$selectCrossLabel, values = rv_plotMap$selectCol),
      valueColumns = 3

    ))

    proxy = DT::dataTableProxy('dtNewDef')

    shiny::observeEvent(input$dtNewDef_cell_edit,{
      info = input$dtNewDef_cell_edit
      i = info$row
      j = info$col
      v = info$value

      crossLabIndex<-rv_plotMap$newLabSub$crossLabel[i]
      rv_plotMap$newLab[,fn_Newclass]<-droplevels(rv_plotMap$newLab[,fn_Newclass])
      oldLevels<-levels(rv_plotMap$newLab[,fn_Newclass])
      if (any(v == oldLevels)){
        rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v} else {
          levels(rv_plotMap$newLab[,fn_Newclass])<-c(oldLevels,v)
          rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v
        }
      rv_plotMap$newLabSub <- rv_plotMap$newLab[rv_plotMap$newLab$crossLabel %in% rv_plotMap$selectCrossLabel, ]
    })

    output$dtTab<-DT::renderDT(as.data.frame(table(rv_plotMap$newLab[,fn_Newclass])),
                               server = T,
                               editable = F,
                               selection = 'none',

                               options = list(bFilter=0,
                                              bInfo=0,
                                              bLengthChange=0,
                                              bAutoWidth=0))

    ##### final table #####
    output$dtFinal<-DT::renderDT(rv_plotMap$newLab,
                                 server = T,
                                 editable = T,
                                 selection = 'single',
                                 filter = 'top',

                                 options = list(bInfo=0,
                                                bLengthChange=0,
                                                bAutoWidth=0,
                                                pageLength=nrow(rv_plotMap$newLab)))
    proxy = DT::dataTableProxy('dtFinal')

    shiny::observeEvent(input$dtFinal_cell_edit,{
      info = input$dtFinal_cell_edit
      i = info$row
      j = info$col
      v = info$value
      crossLabIndex<-rv_plotMap$newLab$crossLabel[i]
      rv_plotMap$newLab[,fn_Newclass]<-droplevels(rv_plotMap$newLab[,fn_Newclass])
      oldLevels<-levels(rv_plotMap$newLab[,fn_Newclass])
      if (any(v == oldLevels)){
        rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v} else {
          levels(rv_plotMap$newLab[,fn_Newclass])<-c(oldLevels,v)
          rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v
        }
    })

    ##### click on heatmap #####
    shiny::observeEvent(input$plotMap_click,{

      xSelect<-trunc(input$plotMap_click$x)+1
      ySelect<-trunc(input$plotMap_click$y)+1
      xlab<-colnames(labelCross[[input$mapOrigin]])
      ylab<-rev(rownames(labelCross[[input$mapOrigin]]))


      if (is.null(rv_plotMap$select)) {
        rv_plotMap$select<-matrix(c(xSelect,ySelect),ncol=2)
        rv_plotMap$selectLab<-matrix(c(xlab[xSelect],ylab[ySelect]),ncol = 2)
        rv_plotMap$selectCrossLabel<-paste(c(ylab[ySelect],xlab[xSelect]),collapse = ' x ')
      } else {
        whichIs<-rv_plotMap$select[,1]==xSelect & rv_plotMap$select[,2]==ySelect
        if (any(whichIs)){
          rv_plotMap$select<-rv_plotMap$select[!(whichIs),,drop=F]
          rv_plotMap$selectLab<-rv_plotMap$selectLab[!(whichIs),,drop=F]
          rv_plotMap$selectCrossLabel<-rv_plotMap$selectCrossLabel[!(whichIs)]
        } else {
          rv_plotMap$select<-rbind(rv_plotMap$select,c(xSelect,ySelect))
          rv_plotMap$selectLab<-rbind(rv_plotMap$selectLab,c(xlab[xSelect],ylab[ySelect]))
          rv_plotMap$selectCrossLabel<-rbind(rv_plotMap$selectCrossLabel,paste(c(ylab[ySelect],xlab[xSelect]),collapse = ' x '))
        }

      }
      rv_plotMap$selectCol <- rainbow(nrow(rv_plotMap$select))

    })



  }

  ui <- shinydashboard::dashboardPage(

    shinydashboard::dashboardHeader(title = "RUNIMC"),
    shinydashboard::dashboardSidebar(
      shinydashboard::sidebarMenu(
        shinydashboard::menuItem("MAP", tabName = "MAP"),
        shinydashboard::menuItem("PLOT", tabName = "PLOT"),
        shinydashboard::menuItem("FINALIZE", tabName = "FINALIZE")
      )
    ),
    shinydashboard::dashboardBody(
      shinydashboard::tabItems(
        shinydashboard::tabItem(tabName = "MAP",
                                shiny::fluidRow(
                                  shinydashboard::box(
                                    shiny::plotOutput("plotMap",
                                                      click='plotMap_click',
                                                      hover =  (NULL)),
                                    width = 12
                                  ),
                                  shinydashboard::box(
                                    shiny::selectInput(inputId = 'mapOrigin',
                                                       label = 'on display:',
                                                       choices = (c('column',
                                                                    'row',
                                                                    'total',
                                                                    fn_dimToPlot)),
                                                       selected = 'column',
                                                       multiple = F),
                                    width = 6
                                  ),
                                  shinydashboard::box(
                                    shiny::actionButton('killIt',
                                                        'delete selection'),
                                    width = 6
                                  )

                                )
        ),
        shinydashboard::tabItem(tabName = "PLOT",
                                shiny::fluidPage(

                                  shinydashboard::box(
                                    shiny::plotOutput("plotPlot",
                                                      click= NULL,
                                                      hover =  (NULL)),
                                    width = 12,
                                    height = NULL),

                                  shinydashboard::box(

                                    DT::DTOutput('dtNewDef'),
                                    width = 6,
                                    height = NULL
                                  ),
                                  shinydashboard::box(
                                    DT::DTOutput('dtTab'),
                                    width = 3,
                                    height = NULL)
                                )


        ),
        shinydashboard::tabItem(tabName = "FINALIZE",
                                shiny::fluidPage(

                                  shinydashboard::box(

                                    DT::DTOutput('dtFinal'),
                                    width = 6,
                                    height = NULL
                                  ),
                                  shinydashboard::box(

                                    shiny::fileInput("defUp", "Upload one table",
                                                     multiple = FALSE,

                                                     accept = ".stk"),

                                    shiny::downloadButton('defDown','Download one table'),

                                  )
                                )
        )
      )
    )
  )



  shiny::shinyApp(ui,server,)
}
