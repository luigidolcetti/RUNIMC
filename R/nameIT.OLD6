#' @export
nameIT <- function(fn_exprs,
                   fn_Xclass,
                   fn_Yclass,
                   fn_dimToPlot,
                   fn_transform = scales::modulus_trans(-1,1),
                   fn_quantileLimits = c(0,1),
                   fn_percent = c(0.01,0.10,0.25,0.5,0.75,0.99),
                   fn_nColPanel = 5,
                   fn_Newclass = 'newClass',
                   fn_undefined = 'UNDF',
                   fn_additionalCoords=NULL) {


  newExprs<-sf::st_drop_geometry(fn_exprs)
  newPolygon<-fn_exprs[,c('uid',fn_Xclass,fn_Yclass)]
  uidX<-as.character(unique(newPolygon$uid))

  Xlevels<-sort(unique(as.character(newExprs[,fn_Xclass])))
  Ylevels<-sort(unique(as.character(newExprs[,fn_Yclass])))

  nColPlot<-fn_nColPanel
  nRowPlot<-ceiling(length(fn_dimToPlot)/nColPlot)

  newExprs[,fn_Xclass]<-factor(newExprs[,fn_Xclass],levels = Xlevels)
  newExprs[,fn_Yclass]<-factor(newExprs[,fn_Yclass],levels = Ylevels)

  newPolygon[,fn_Xclass]<-factor(newExprs[,fn_Xclass],levels = Xlevels)
  newPolygon[,fn_Yclass]<-factor(newExprs[,fn_Yclass],levels = Ylevels)

  if(!is.null(fn_additionalCoords)){
    if (nrow(fn_additionalCoords)!=nrow(fn_exprs)) {
      stop(mError('additional coordinates length differs from expression matrix'))} else {
        colnames(fn_additionalCoords)<-c('Dimensional_X','Dimensional_Y')
        newDimensional<-cbind.data.frame(fn_additionalCoords,newExprs[,c('uid',fn_Xclass,fn_Yclass)])
      }
  }

  axisLimits<-sapply(fn_dimToPlot,function(mrkr){
    newLimits <- quantile(newExprs[,mrkr],fn_quantileLimits)
    list(linear = newLimits,
         transformed = fn_transform$transform(newLimits))
  },USE.NAMES = T,simplify = F)

  labelClash<-newExprs[,c(fn_Yclass,fn_Xclass)]

  tLabelClash<-table(labelClash)

  labelCross<-list()


  labelCross[['column']]<-apply(tLabelClash,2,function(x){x/sum(x)})
  labelCross[['row']]<-t(apply(tLabelClash,1,function(x){x/sum(x)}))
  labelCross[['total']]<-matrix(tLabelClash/sum(tLabelClash),
                                nrow=length(Ylevels),
                                ncol=length(Xlevels),
                                dimnames = list(Ylevels,Xlevels))

  labelCross<-sapply(labelCross,function(x){
    Rowv <- as.dendrogram(hclust(dist(x)))
    rowInd <- order.dendrogram(Rowv)
    Colv <- as.dendrogram(hclust(dist(t(x))))
    colInd <- order.dendrogram(Colv)
    x<-x[rowInd,colInd]
    return(x)
  },USE.NAMES = T,simplify = F)

  medianNewExprs<-aggregate(newExprs[,fn_dimToPlot,drop=F],by=list(newExprs[,fn_Xclass],newExprs[,fn_Yclass]),FUN=median,drop = F)
  medianNewExprs[is.na(medianNewExprs)]<-0
  colnames(medianNewExprs)[1:2]<-c(fn_Xclass,fn_Yclass)

  TEMP<-sapply(fn_dimToPlot,function(dTp){

    focusColumn<-fn_transform$transform(medianNewExprs[,dTp])
    focusColumn<-focusColumn/max(focusColumn)
    out_transformed<-matrix(focusColumn,
                            nrow = length(Ylevels),
                            ncol = length(Xlevels),
                            dimnames = list(Ylevels,Xlevels),
                            byrow = T)

    Rowv <- as.dendrogram(hclust(dist(out_transformed)))
    rowInd <- order.dendrogram(Rowv)
    Colv <- as.dendrogram(hclust(dist(t(out_transformed))))
    colInd <- order.dendrogram(Colv)
    out_transformed<-out_transformed[rowInd,colInd]

    focusColumn<-medianNewExprs[,dTp]
    focusColumn<-focusColumn/max(focusColumn)
    out_linear<-matrix(focusColumn,
                       nrow = length(Ylevels),
                       ncol = length(Xlevels),
                       dimnames = list(Ylevels,Xlevels),
                       byrow = T)

    Rowv <- as.dendrogram(hclust(dist(out_linear)))
    rowInd <- order.dendrogram(Rowv)
    Colv <- as.dendrogram(hclust(dist(t(out_linear))))
    colInd <- order.dendrogram(Colv)
    out_linear<-out_linear[rowInd,colInd]

    list(linear = out_linear,
         transformed = out_transformed)

  },USE.NAMES = T,simplify = F)

  labelCross<-append(labelCross,TEMP)

  rm(TEMP)


  labelCross_long<-expand.grid(rev(rownames(labelCross[['row']])),colnames(labelCross[['row']]))
  numberCross_long<-expand.grid(seq_along(rownames(labelCross[['row']])),seq_along(colnames(labelCross[['row']])))

  colnames(labelCross_long)<-c(fn_Yclass,fn_Xclass)
  labelCross_long[,fn_Xclass]<-factor(labelCross_long[,fn_Xclass],levels = Xlevels)
  labelCross_long[,fn_Yclass]<-factor(labelCross_long[,fn_Yclass],levels = Ylevels)

  colnames(numberCross_long)<-c('Y','X')
  labelCross_long<-cbind.data.frame(labelCross_long,
                                    crossLabel = paste(labelCross_long[,fn_Xclass],
                                                       labelCross_long[,fn_Yclass],
                                                       sep = ' x '),
                                    numberCross_long,
                                    perc = as.vector(labelCross[['row']]))

  labelCross_def<-cbind.data.frame(labelCross_long[,c(fn_Xclass,
                                                      fn_Yclass,
                                                      'crossLabel')],
                                   NC = fn_undefined)
  colnames(labelCross_def)[4]<-fn_Newclass

  exprs_long<-newExprs[,c(fn_Xclass,fn_Yclass,fn_dimToPlot)]
  exprs_long<-as.data.frame(tidyr::pivot_longer(data = exprs_long,
                                                cols = fn_dimToPlot,
                                                names_to = 'marker',
                                                values_to = 'MFI'))

  exprs_long<-dplyr::left_join(exprs_long,
                               labelCross_long[,c(fn_Xclass,
                                                  fn_Yclass,
                                                  'crossLabel',
                                                  'X',
                                                  'Y')],
                               by = c(fn_Xclass,fn_Yclass))

  exprs_long<-list(linear = exprs_long,
                   transformed = exprs_long)

  exprs_long$transformed$MFI<-fn_transform$transform(exprs_long$transformed$MFI)

  area_long<-newExprs[,c(fn_Xclass,fn_Yclass,'area')]
  area_long<-dplyr::left_join(area_long,
                              labelCross_long[,c(fn_Xclass,
                                                 fn_Yclass,
                                                 'crossLabel',
                                                 'X',
                                                 'Y')],
                              by = c(fn_Xclass,fn_Yclass))


  # markerSliders<-sapply(fn_dimToPlot,function(mrkr){
  #   shiny::sliderInput(inputId = mrkr,
  #                      label = mrkr,
  #                      min = axisLimits[[mrkr]][1],
  #                      max = axisLimits[[mrkr]][2],
  #                      value = axisLimits[[mrkr]],
  #                      width = 100)
  # },USE.NAMES = T,simplify = F)



  server <- function(input, output, session) {



    ##### set reactive values #####

    rv_plotMap<-shiny::reactiveValues(map = raster::raster(labelCross[['row']],
                                                           xmn=0,
                                                           xmx=0+ncol(labelCross[['row']]),
                                                           ymn=0,
                                                           ymx=0+nrow(labelCross[['row']])),
                                      df = labelCross_long,
                                      newLab = labelCross_def,
                                      newLabSub =NULL,
                                      select = NULL,
                                      selectCol = NULL,
                                      selectLab = NULL,
                                      selectCrossLabel = NULL,
                                      msk = F)

    rv_plotProfile<-shiny::reactiveValues(original = as.data.frame(exprs_long),
                                          sub = NULL,
                                          axisLimits = axisLimits,
                                          density = NULL,
                                          switch =NULL)

    rv_plotPolygon<-shiny::reactiveValues(panel = NULL,
                                          legend = NULL,
                                          width = 500)

    rv_plotDimensional<-shiny::reactiveValues(panel = NULL,
                                              legend = NULL,
                                              labels = NULL)

    ##### kill selection #####

    shiny::observeEvent(input$killIt,{
      rv_plotMap$select <- NULL
      rv_plotMap$selectCol <- NULL
      rv_plotMap$selectLab <- NULL
      rv_plotMap$selectCrossLabel <- NULL
    })

    ##### toggle marker #####

    shiny::observeEvent(list(input$mrkr,input$trnsfrm),{

      shiny::updateSliderInput(session = session,
                               inputId = 'trsh',
                               min = unname(axisLimits[[input$mrkr]][[input$trnsfrm]][1]),
                               max = unname(axisLimits[[input$mrkr]][[input$trnsfrm]][2]),
                               value = unname(rv_plotProfile$axisLimits[[input$mrkr]][[input$trnsfrm]]))

    })

    shiny::observeEvent(input$trsh,{

      rv_plotProfile$axisLimits[[input$mrkr]][[input$trnsfrm]]<-input$trsh

      if (input$trnsfrm == 'linear'){
        rv_plotProfile$axisLimits[[input$mrkr]][['transformed']]<-
          fn_transform$transform(input$trsh)} else {
            rv_plotProfile$axisLimits[[input$mrkr]][['linear']]<-
              fn_transform$inverse(input$trsh)
          }


    })

    ##### toggle mask #####

    shiny::observeEvent(input$msk,{
      if (rv_plotMap$msk) rv_plotMap$msk<-F else rv_plotMap$msk<-T
    })

    ##### set origin for heatmap #####

    shiny::observeEvent(list(input$mapOrigin,input$trnsfrm_HM),{

      if (input$mapOrigin %in% c('row','column','total')){
        shinyjs::disable("trnsfrm_HM")
        rv_plotMap$map<-raster::raster(labelCross[[input$mapOrigin]],
                                       xmn=0,
                                       xmx=0+ncol(labelCross[[input$mapOrigin]]),
                                       ymn=0,
                                       ymx=0+nrow(labelCross[[input$mapOrigin]]))

        xlab<-colnames(labelCross[[input$mapOrigin]])
        ylab<-rev(rownames(labelCross[[input$mapOrigin]]))

      } else {
        shinyjs::enable("trnsfrm_HM")
        rv_plotMap$map<-raster::raster(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]],
                                       xmn=0,
                                       xmx=0+ncol(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]]),
                                       ymn=0,
                                       ymx=0+nrow(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]]))

        xlab<-colnames(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]])
        ylab<-rev(rownames(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]]))
      }


      if (!is.null(rv_plotMap$selectLab)){
        rv_plotMap$select<-t(apply(rv_plotMap$selectLab,1,function(x){
          xInd<-which(xlab == x[1],arr.ind = T)
          yInd<-which(ylab == x[2],arr.ind = T)
          return (c(xInd,yInd))
        }))
      }
    })


    ##### I/O file #####
    shiny::observeEvent(input$defUp,{
      rv_plotMap$newLab<-read.table(input$defUp$datapath,
                                    header = T,
                                    as.is = T,
                                    check.names = F,
                                    stringsAsFactors = T)
      rv_plotMap$newLab[,fn_Xclass]<-factor(rv_plotMap$newLab[,fn_Xclass])
      rv_plotMap$newLab[,fn_Yclass]<-factor(rv_plotMap$newLab[,fn_Yclass])
    })

    output$defDown <- shiny::downloadHandler(

      filename =function() 'Definition_table.txt',
      content = function(file) {
        write.table(rv_plotMap$newLab,file,append = F,row.names = F)
      }
    )

    shiny::observeEvent(input$trshUp,{
      newTrshTable<-read.table(input$trshUp$datapath,
                               header = T,
                               colClasses = c('character',rep('numeric',4)),
                               check.names = F,
                               stringsAsFactors = F)

      rv_plotProfile$axisLimits<-apply(newTrshTable[,-1],1,function(x){
        x<-unname(x)
        newList<-list(linear=x[1:2],transformed=x[3:4])})
      names(rv_plotProfile$axisLimits)<-newTrshTable[,1]

    })

    output$trshDown <- shiny::downloadHandler(

      filename =function() 'Treshold_table.txt',
      content = function(file) {

        tableOut<-unlist(rv_plotProfile$axisLimits,recursive = T)
        tableOut<-matrix(tableOut,ncol=4,byrow = T)
        colnames(tableOut)<-c('lin.low','lin.high','trnsf.low','trnsf.high')
        tableOut<-cbind.data.frame(maker=names(axisLimits),
                                   tableOut)
        write.table(tableOut,file,append = F,row.names = F)
      }
    )




    ##### plot heatmap #####

    output$plotMap<-shiny::renderPlot({

      par(cex.axis = 0.8,
          las = 2,
          xpd=T)



      if (input$mapOrigin %in% c('column',
                                 'row',
                                 'total')){
        lgnd<-scales::label_percent()(fn_percent)
        ylab<-rev(rownames(labelCross[[input$mapOrigin]]))
        xlab<-colnames(labelCross[[input$mapOrigin]])
      } else {
        lgnd<-fn_percent
        ylab<-rev(rownames(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]]))
        xlab<-colnames(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]])
      }

      nBrks<-length(fn_percent)
      newColorScale<-scales::colour_ramp(c('blue','white','red'))(fn_percent)

      raster::image(rv_plotMap$map,
                    ann = F,
                    axes = F,
                    col = newColorScale,
                    breaks = c(0,fn_percent))

      legend(x = 1,y=-1,
             legend = lgnd,
             fill = newColorScale,
             ncol=nBrks)


      if(rv_plotMap$msk){

        msk<-sapply(rev(ylab),function(y){
          sapply(xlab,function(x){
            out<-rv_plotMap$newLab[rv_plotMap$newLab[,fn_Xclass]==x &
                                     rv_plotMap$newLab[,fn_Yclass]==y,fn_Newclass]

            if (out==fn_undefined) out<-NA else out<-rgb(0,1,0,0.5)
            return(out)
          },USE.NAMES = F,simplify = F)
        },USE.NAMES = F,simplify = F)

        msk<-unlist(msk,recursive = T)} else { msk<-rep(NA,length(xlab)*length(ylab))}

      raster::plot(raster::rasterToPolygons(rv_plotMap$map),add=T,col=msk,border='gray60')
      # pltXmx<-length(xlab)
      # pltYmx<-length(ylab)
      # for (cln in seq_along(xlab)) lines(x=c(cln,cln),y=c(0,pltYmx),col='gray60',lty=2)
      # for (rw in seq_along(ylab)) lines(x=c(0,pltXmx),y=c(rw,rw),col='gray60',lty=2)

      points(rv_plotMap$select-c(0.5,0.5),
             bg = rv_plotMap$selectCol,
             pch = 22,
             col = 'black',
             lwd=1,
             cex = 2)

      axis(2, at=seq_along(ylab)-0.5, labels=ylab)
      axis(1, at=seq_along(xlab)-0.5, labels=xlab)
    })

    ##### plot density #####

    observeEvent(list(input$sdbmn,
                      input$trnsfrm),{

                        if (input$sdbmn=='PLOT'){


                          density_list<-sapply(as.vector(rv_plotMap$selectCrossLabel),function(x){

                            ss_plot<-exprs_long[[input$trnsfrm]][exprs_long[[input$trnsfrm]]$crossLabel ==x,]

                            # ss_plot<-rv_plotProfile$original[rv_plotProfile$original$crossLabel ==x,]

                            # if (nrow(ss_plot)>fn_sampleLimit) ss_plot<-ss_plot[sample(1:nrow(ss_plot),fn_sampleLimit),]

                            dd<-sapply(fn_dimToPlot,function(mrkr){

                              sss_plot<-ss_plot[ss_plot$marker==mrkr,]

                              if (nrow(sss_plot)>3){
                                ddOut<-density(sss_plot$MFI,
                                               from=unname(axisLimits[[mrkr]][[input$trnsfrm]][1]),
                                               to=unname(axisLimits[[mrkr]][[input$trnsfrm]][2]))

                                ddOut$y<-(ddOut$y-min(ddOut$y))/(max(ddOut$y)-min(ddOut$y))

                                out<-data.frame(x=ddOut$x,
                                                y=ddOut$y,
                                                sss_plot[1,c(fn_Xclass,
                                                             fn_Yclass,
                                                             'crossLabel'),
                                                         drop = F],
                                                marker = mrkr,
                                                row.names = NULL)} else {
                                                  if (nrow(sss_plot)==0){
                                                    out<-data.frame(x=0,
                                                                    y=0,
                                                                    sss_plot[1,c(fn_Xclass,
                                                                                 fn_Yclass,
                                                                                 'crossLabel'),
                                                                             drop = F],
                                                                    marker = mrkr,
                                                                    row.names = NULL)
                                                  } else {
                                                    TEMP_x<-fn_transform$transform(sss_plot$MFI)
                                                    out<-data.frame(x=TEMP_x[order(TEMP_x)],
                                                                    y=1,
                                                                    sss_plot[1,c(fn_Xclass,
                                                                                 fn_Yclass,
                                                                                 'crossLabel'),
                                                                             drop = F],
                                                                    marker = mrkr,
                                                                    row.names = NULL)
                                                  }}

                              return(out)
                            },USE.NAMES = F,simplify = F)

                            do.call(rbind.data.frame,dd)
                          },USE.NAMES = F,simplify = F)

                          rv_plotProfile$density<-do.call(rbind.data.frame,density_list)

                        }
                      })


    output$plotPlot<-shiny::renderPlot({

      par(mfrow=c(nRowPlot,nColPlot),mar=c(0,0,0,0),bg='black',col.main='white')
      for(mrkr in fn_dimToPlot){
        sub_plot<-rv_plotProfile$density[rv_plotProfile$density$marker==mrkr,]
        plot(x=NA,
             y=NA,
             xlim = axisLimits[[mrkr]][[input$trnsfrm]],
             ylim = c(0,1.2),
             xlab = NULL,
             ylab = NULL,
             xaxt = 'n',
             yaxt = 'n')
        title(main = mrkr,
              line = -1,
              outer = F)
        abline(v=rv_plotProfile$axisLimits[[mrkr]][[input$trnsfrm]],
               col='gray60',
               lty=2)
        popToPlot<-unique(sub_plot$crossLabel)
        for (pop in 1:length(popToPlot)){
          subSub_plot<-sub_plot[sub_plot$crossLabel==popToPlot[pop],]
          lines(x=subSub_plot$x,
                y=subSub_plot$y,
                col = rv_plotMap$selectCol[pop],
                lwd = 2)
        }
      }


      # ppt<-sapply(fn_dimToPlot,function(mrkr){
      #   subsub_plot<-rv_plotProfile$density[rv_plotProfile$density$marker==mrkr,]
      #   # subsub_plot<-subsub_plot[sample(1:nrow(subsub_plot),nrow(subsub_plot)/10),]
      #   ggplot2::ggplot()+
      #     ggplot2::geom_line(data = subsub_plot,mapping = ggplot2::aes(x=x,y=y,col=crossLabel))+
      #     ggplot2::scale_x_continuous(trans=fn_transform,limits = axisLimits[[mrkr]])+
      #     ggplot2::scale_color_manual(values = rv_plotMap$selectCol,
      #                                 breaks = rv_plotMap$selectCrossLabel,
      #                                 guide = ggplot2::guide_legend(override.aes = list(fill = rv_plotMap$selectCol) ))+
      #     ggplot2::geom_vline(xintercept = rv_plotProfile$axisLimits[[mrkr]],col='white')+
      #     ggplot2::ggtitle(mrkr)+
      #     ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'),
      #                    panel.grid = ggplot2::element_line(color = 'gray20',
      #                                                       linetype = 3),
      #                    legend.position = 'none',
      #                    axis.title.x = ggplot2::element_blank(),
      #                    axis.ticks.y = ggplot2::element_blank(),
      #                    axis.title.y = ggplot2::element_blank(),
      #                    axis.text.y = ggplot2::element_blank(),
      #                    plot.title = ggplot2::element_text(size=12))
      #
      # },USE.NAMES = T,simplify = F)
      #
      # layoutQ<-sqrt(length(ppt))
      # layoutY<-floor(layoutQ)
      # layoutX<-layoutY+((length(ppt)-layoutY^2))/layoutY
      # layoutMatrix<-matrix(c(names(ppt),rep(NULL,length(ppt)-(layoutX*layoutY))),ncol=layoutX,nrow=layoutY)
      #
      #
      # rv_plotProfile$gridGrob<-gridExtra::grid.arrange(grobs = ppt,
      #                                                  layout_matrix = layoutMatrix,
      #                                                  as.table = F)


    }
    )


    #
    #     output$plotPlot<-shiny::renderPlot({
    #
    #       sub_plot<-sapply(as.vector(rv_plotMap$selectCrossLabel),function(x){
    #         out<-rv_plotProfile$original[rv_plotProfile$original$crossLabel ==x,]
    #         if (nrow(out)>fn_sampleLimit) out<-out[sample(1:nrow(out),fn_sampleLimit),]
    #         return(out)
    #       },USE.NAMES = F,simplify = F)
    #
    #
    #       sub_plot<-do.call(rbind.data.frame,sub_plot)
    #
    #       ppt<-sapply(fn_dimToPlot,function(mrkr){
    #         subsub_plot<-sub_plot[sub_plot$marker==mrkr,]
    #         ggplot2::ggplot()+
    #           ggplot2::geom_density(data = subsub_plot,mapping = ggplot2::aes(x=MFI,y=..scaled..,col=crossLabel))+
    #           ggplot2::scale_x_continuous(trans=fn_transform,limits = axisLimits[[mrkr]])+
    #           ggplot2::scale_color_manual(values = rv_plotMap$selectCol,
    #                                       breaks = rv_plotMap$selectCrossLabel,
    #                                       guide = ggplot2::guide_legend(override.aes = list(fill = rv_plotMap$selectCol) ))+
    #           ggplot2::geom_vline(xintercept = rv_plotProfile$axisLimits[[mrkr]],col='white')+
    #           ggplot2::ggtitle(mrkr)+
    #           ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'),
    #                          panel.grid = ggplot2::element_line(color = 'gray20',
    #                                                             linetype = 3),
    #                          legend.position = 'none',
    #                          axis.title.x = ggplot2::element_blank(),
    #                          axis.ticks.y = ggplot2::element_blank(),
    #                          axis.title.y = ggplot2::element_blank(),
    #                          axis.text.y = ggplot2::element_blank(),
    #                          plot.title = ggplot2::element_text(size=12))
    #
    #       },USE.NAMES = T,simplify = F)
    #
    #       layoutQ<-sqrt(length(ppt))
    #       layoutY<-floor(layoutQ)
    #       layoutX<-layoutY+((length(ppt)-layoutY^2))/layoutY
    #       layoutMatrix<-matrix(c(names(ppt),rep(NULL,length(ppt)-(layoutX*layoutY))),ncol=layoutX,nrow=layoutY)
    #
    #       rv_plotProfile$gridGrob<-gridExtra::grid.arrange(grobs = ppt,
    #                                                        layout_matrix = layoutMatrix,
    #                                                        as.table = F)
    #
    #
    #
    #
    #     }
    #     )

    ##### plot Pie Count #####
    output$plotPieCount<-shiny::renderPlot({

      area_cross<-dplyr::left_join(area_long,
                                   rv_plotMap$newLab,
                                   by=c(fn_Xclass,fn_Yclass))

      tClassTable<-as.data.frame(table(area_cross[,fn_Newclass]))
      colnames(tClassTable)<-c('def','cnts')

      ggp<-ggplot2::ggplot(tClassTable)+
        ggplot2::geom_bar(mapping = ggplot2::aes(x = "", y=cnts,fill=def),
                          stat = 'identity',
                          width = 1)+
        ggplot2::coord_polar("y")+
        ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'),
                       panel.grid = ggplot2::element_line(color = 'gray20',
                                                          linetype = 3),
                       legend.position = 'bottom')
      print(ggp)
    })

    ##### plot Pie Area #####
    output$plotPieArea<-shiny::renderPlot({

      area_cross<-dplyr::left_join(area_long,
                                   rv_plotMap$newLab,
                                   by=c(fn_Xclass,fn_Yclass))

      colnames(area_cross)[colnames(area_cross)==fn_Newclass]<-'def'

      tClassTable<-aggregate(area~def,area_cross,sum)

      ggp<-ggplot2::ggplot(tClassTable)+
        ggplot2::geom_bar(mapping = ggplot2::aes(x = "", y=area,fill=def),
                          stat = 'identity',
                          width = 1)+
        ggplot2::coord_polar("y")+
        ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'black'),
                       panel.grid = ggplot2::element_line(color = 'gray20',
                                                          linetype = 3),
                       legend.position = 'bottom')
      print(ggp)
    })


    ##### plot Polygons #####

    observeEvent(list(input$uidSelect,input$mrkrSelect),{

      sub_poly<-newPolygon[newPolygon$uid==input$uidSelect,]



      sub_poly<-dplyr::left_join(sub_poly,
                                 rv_plotMap$newLab,
                                 by=c(fn_Xclass,fn_Yclass))

      TEMP<-sf::st_drop_geometry(sub_poly)
      TEMP<-levels(TEMP[,input$mrkrSelect])
      newCols<-rainbow(length(TEMP))

      rv_plotPolygon$panel<-RUNIMC::ggp.geometry(fn_gg = NULL,
                                                 fn_geometry = sub_poly,
                                                 fn_fillVar = input$mrkrSelect,
                                                 fn_fillCol = newCols,
                                                 fn_bg = 'black')

      rv_plotPolygon$legend<-ggpubr::as_ggplot(ggpubr::get_legend(rv_plotPolygon$panel+
                                                                    ggplot2::theme(legend.position = 'right')))
      rv_plotPolygon$panel<-rv_plotPolygon$panel+ggplot2::theme(legend.position = 'none')
    })

    observeEvent(input$ppwidth,{rv_plotPolygon$width<-input$ppwidth})

    output$plotPolygon<-shiny::renderPlot({print(rv_plotPolygon$panel)},height = 600)
    output$plotPolygonLegend<-shiny::renderPlot({print(rv_plotPolygon$legend)},height = 600)

    ##### plot dimensions #####

    observeEvent(list(input$dimRed,input$mrkrSelect_Dimensional),{

      if (exists('newDimensional')){

        sub_dimensional<-dplyr::left_join(newDimensional,
                                          rv_plotMap$newLab,
                                          by=c(fn_Xclass,fn_Yclass))

        newCols<-rainbow(length(levels(sub_dimensional[,input$mrkrSelect_Dimensional])))

        TEMP_L<-nrow(sub_dimensional)
        sub_dimensional<-sub_dimensional[sample(1:TEMP_L,TEMP_L*(input$dimRed/100)),]

        rv_plotDimensional$panel<-ggplot2::ggplot(sub_dimensional)+
          ggplot2::geom_point(ggplot2::aes_string(x='Dimensional_X',
                                                  y='Dimensional_Y',
                                                  color=input$mrkrSelect_Dimensional),
                              alpha = input$pointAlpha,
                              size = input$pointSize)+
          ggplot2::scale_color_manual(values = newCols)

        rv_plotDimensional$legend<-ggpubr::as_ggplot(ggpubr::get_legend(rv_plotDimensional$panel))
        rv_plotDimensional$panel<-rv_plotDimensional$panel+ggplot2::theme(legend.position = 'none')

      }
    })

    observeEvent(input$pointSize,{
      rv_plotDimensional$panel$layers[[1]]$aes_params$size<-input$pointSize
      TEMP<-rv_plotDimensional$panel
      rv_plotDimensional$panel<-NULL
      rv_plotDimensional$panel<-TEMP
    })

    observeEvent(input$pointAlpha,{
      rv_plotDimensional$panel$layers[[1]]$aes_params$alpha<-input$pointAlpha
      TEMP<-rv_plotDimensional$panel
      rv_plotDimensional$panel<-NULL
      rv_plotDimensional$panel<-TEMP

    })


    output$plotDimensional<-shiny::renderPlot({print(rv_plotDimensional$panel)})
    output$plotDimensionalLegend<-shiny::renderPlot({print(rv_plotDimensional$legend)})


    ##### selection table #####

    shiny::observeEvent(rv_plotMap$selectCrossLabel,{

      rv_plotMap$newLabSub <- rv_plotMap$newLab[rv_plotMap$newLab$crossLabel %in% rv_plotMap$selectCrossLabel, ]
    })

    output$dtNewDef<-DT::renderDT(DT::formatStyle(
      table = DT::datatable(rv_plotMap$newLabSub,
                            editable = 'cell',
                            selection = 'single'
      ),
      columns = 3,
      target = 'cell',
      backgroundColor = DT::styleEqual(levels = rv_plotMap$selectCrossLabel, values = rv_plotMap$selectCol),
      valueColumns = 3

    ))

    proxy = DT::dataTableProxy('dtNewDef')

    shiny::observeEvent(input$dtNewDef_cell_edit,{
      info = input$dtNewDef_cell_edit
      i = info$row
      j = info$col
      v = info$value

      crossLabIndex<-rv_plotMap$newLabSub$crossLabel[i]
      rv_plotMap$newLab[,fn_Newclass]<-droplevels(rv_plotMap$newLab[,fn_Newclass])
      oldLevels<-levels(rv_plotMap$newLab[,fn_Newclass])
      if (any(v == oldLevels)){
        rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v} else {
          levels(rv_plotMap$newLab[,fn_Newclass])<-c(oldLevels,v)
          rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v
        }
      rv_plotMap$newLabSub <- rv_plotMap$newLab[rv_plotMap$newLab$crossLabel %in% rv_plotMap$selectCrossLabel, ]
    })

    output$dtTab<-DT::renderDT(as.data.frame(table(rv_plotMap$newLab[,fn_Newclass])),
                               server = T,
                               editable = F,
                               selection = 'none',

                               options = list(bFilter=0,
                                              bInfo=0,
                                              bLengthChange=0,
                                              bAutoWidth=0))

    ##### final table #####
    output$dtFinal<-DT::renderDT(rv_plotMap$newLab,
                                 server = T,
                                 editable = T,
                                 selection = 'single',
                                 filter = 'top',

                                 options = list(bInfo=0,
                                                bLengthChange=0,
                                                bAutoWidth=0,
                                                pageLength=nrow(rv_plotMap$newLab)))
    proxy = DT::dataTableProxy('dtFinal')

    shiny::observeEvent(input$dtFinal_cell_edit,{
      info = input$dtFinal_cell_edit
      i = info$row
      j = info$col
      v = info$value
      crossLabIndex<-rv_plotMap$newLab$crossLabel[i]
      rv_plotMap$newLab[,fn_Newclass]<-droplevels(rv_plotMap$newLab[,fn_Newclass])
      oldLevels<-levels(rv_plotMap$newLab[,fn_Newclass])
      if (any(v == oldLevels)){
        rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v} else {
          levels(rv_plotMap$newLab[,fn_Newclass])<-c(oldLevels,v)
          rv_plotMap$newLab[rv_plotMap$newLab$crossLabel == crossLabIndex,fn_Newclass] <- v
        }
    })

    ##### click on heatmap #####
    shiny::observeEvent(input$plotMap_click,{

      xSelect<-trunc(input$plotMap_click$x)+1
      ySelect<-trunc(input$plotMap_click$y)+1

      if (input$mapOrigin %in% c('row','column','total')){
        xlab<-colnames(labelCross[[input$mapOrigin]])
        ylab<-rev(rownames(labelCross[[input$mapOrigin]]))
      } else {
        xlab<-colnames(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]])
        ylab<-rev(rownames(labelCross[[input$mapOrigin]][[input$trnsfrm_HM]]))
      }


      if (is.null(rv_plotMap$select)) {
        rv_plotMap$select<-matrix(c(xSelect,ySelect),ncol=2)
        rv_plotMap$selectLab<-matrix(c(xlab[xSelect],ylab[ySelect]),ncol = 2)
        rv_plotMap$selectCrossLabel<-paste(c(xlab[xSelect],ylab[ySelect]),collapse = ' x ')
      } else {
        whichIs<-rv_plotMap$select[,1]==xSelect & rv_plotMap$select[,2]==ySelect
        if (any(whichIs)){
          rv_plotMap$select<-rv_plotMap$select[!(whichIs),,drop=F]
          rv_plotMap$selectLab<-rv_plotMap$selectLab[!(whichIs),,drop=F]
          rv_plotMap$selectCrossLabel<-rv_plotMap$selectCrossLabel[!(whichIs)]
        } else {
          rv_plotMap$select<-rbind(rv_plotMap$select,c(xSelect,ySelect))
          rv_plotMap$selectLab<-rbind(rv_plotMap$selectLab,c(xlab[xSelect],ylab[ySelect]))
          rv_plotMap$selectCrossLabel<-rbind(rv_plotMap$selectCrossLabel,paste(c(xlab[xSelect],ylab[ySelect]),collapse = ' x '))
        }

      }
      rv_plotMap$selectCol <- rainbow(nrow(rv_plotMap$select))

    })



  }


  ##### UI #####

  ui <- shinydashboard::dashboardPage(

    shinydashboard::dashboardHeader(title = "RUNIMC"),
    shinydashboard::dashboardSidebar(
      shinydashboard::sidebarMenu(id = 'sdbmn',
                                  shinydashboard::menuItem("MAP", tabName = "MAP"),
                                  shinydashboard::menuItem("PLOT", tabName = "PLOT"),
                                  shinydashboard::menuItem('POLYGONS',tabName = 'POLYGONS'),
                                  shinydashboard::menuItem('DIMENSIONAL',tabName = 'DIMENSIONAL'),
                                  shinydashboard::menuItem("FINALIZE", tabName = "FINALIZE")
      )
    ),
    shinydashboard::dashboardBody(
      shinyjs::useShinyjs(),
      shinydashboard::tabItems(
        shinydashboard::tabItem(tabName = "MAP",
                                shiny::fluidRow(
                                  shinydashboard::box(
                                    shiny::plotOutput("plotMap",
                                                      click='plotMap_click',
                                                      hover =  (NULL)),
                                    width = 12
                                  ),
                                  shinydashboard::box(
                                    shiny::selectInput(inputId = 'mapOrigin',
                                                       label = 'on display:',
                                                       choices = (c('column',
                                                                    'row',
                                                                    'total',
                                                                    fn_dimToPlot)),
                                                       selected = 'column',
                                                       multiple = F),
                                    shiny::selectInput(inputId = 'trnsfrm_HM',
                                                       label = 'scale:',
                                                       choices = c('linear',
                                                                   'transformed'),
                                                       selected = 'transformed',
                                                       multiple = F),
                                    width = 6
                                  ),
                                  shinydashboard::box(
                                    shiny::actionButton('killIt',
                                                        'delete selection'),
                                    shiny::actionButton('msk',
                                                        'mask/ unmask'),
                                    width = 6
                                  )

                                )
        ),
        shinydashboard::tabItem(tabName = "PLOT",
                                shiny::fluidPage(

                                  shinydashboard::box(
                                    shiny::plotOutput("plotPlot",
                                                      click= NULL,
                                                      hover =  (NULL)),
                                    width = 12,
                                    height = NULL),

                                  shinydashboard::box(

                                    DT::DTOutput('dtNewDef'),
                                    width = 6,
                                    height = NULL
                                  ),
                                  shinydashboard::box(
                                    DT::DTOutput('dtTab'),
                                    width = 3,
                                    height = NULL),

                                  shinydashboard::box(
                                    shiny::selectInput(inputId = 'trnsfrm',
                                                       label = 'X axis:',
                                                       choices = c('linear',
                                                                   'transformed'),
                                                       selected = 'transformed',
                                                       multiple = F),
                                    shiny::selectInput(inputId = 'mrkr',
                                                       label = 'marker',
                                                       choices = fn_dimToPlot,
                                                       selected = fn_dimToPlot[1],
                                                       multiple = F),
                                    shiny::sliderInput(inputId = 'trsh',
                                                       label = 'treshold',
                                                       min = unname(axisLimits[[fn_dimToPlot[1]]][['transformed']][1]),
                                                       max = unname(axisLimits[[fn_dimToPlot[1]]][['transformed']][2]),
                                                       value = unname(axisLimits[[fn_dimToPlot[1]]][['transformed']]),
                                                       step = 0.01),
                                    width = 3,
                                    height = NULL)
                                )
        ),
        shinydashboard::tabItem(tabName = "POLYGONS",
                                shiny::fluidRow(
                                  shinydashboard::box(
                                    shiny::selectInput(inputId = 'uidSelect',
                                                       label = 'Select one sample',
                                                       choices = (uidX),
                                                       selected = uidX[1],
                                                       multiple = F),
                                    shiny::selectInput(inputId = 'mrkrSelect',
                                                       label = 'Select one marker',
                                                       choices = c(fn_Newclass,
                                                                   fn_Xclass,
                                                                   fn_Yclass),
                                                       selected = fn_Newclass,
                                                       multiple = F),
                                    width = 2
                                  ),
                                  shinydashboard::box(
                                    shiny::plotOutput("plotPolygon",
                                                      click = NULL,
                                                      hover = NULL),
                                    width = 6,
                                    height = 700
                                  ),
                                  shinydashboard::box(
                                    shiny::plotOutput("plotPolygonLegend",
                                                      click = NULL,
                                                      hover = NULL),
                                    width = 4,
                                    height = 700
                                  )
                                )
        ),
        shinydashboard::tabItem(tabName = "DIMENSIONAL",
                                shiny::fluidRow(
                                  shinydashboard::box(
                                    shiny::sliderInput(inputId = 'dimRed',
                                                       label = 'Percent to plot:',
                                                       min = 0,
                                                       max = 100,
                                                       value = 10,
                                                       step = 1,
                                                       post = '%'),
                                    shiny::selectInput(inputId = 'mrkrSelect_Dimensional',
                                                       label = 'Select one marker',
                                                       choices = c(fn_Newclass,
                                                                   fn_Xclass,
                                                                   fn_Yclass),
                                                       selected = fn_Newclass,
                                                       multiple = F),
                                    shiny::sliderInput(inputId = 'pointSize',
                                                       label = 'size: ',
                                                       min = 1,
                                                       max = 10,
                                                       value = 3,
                                                       step = 1),
                                    shiny::sliderInput(inputId = 'pointAlpha',
                                                       label = 'alpha: ',
                                                       min = 0,
                                                       max = 1,
                                                       value = 0.5,
                                                       step = 0.1),
                                    width = 2
                                  ),
                                  shinydashboard::box(
                                    shiny::plotOutput("plotDimensional",
                                                      click = NULL,
                                                      hover = NULL),
                                    width = 6
                                  ),
                                  shinydashboard::box(

                                    shiny::plotOutput("plotDimensionalLegend",
                                                      click = NULL,
                                                      hover = NULL),
                                    width = 4
                                  )
                                )
        ),
        shinydashboard::tabItem(tabName = "FINALIZE",
                                shiny::fluidPage(

                                  shinydashboard::box(

                                    DT::DTOutput('dtFinal'),
                                    width = 6,
                                    height = NULL
                                  ),
                                  shinydashboard::box(

                                    shiny::fileInput("defUp", "Upload one table",
                                                     multiple = FALSE,

                                                     accept = ".stk"),

                                    shiny::downloadButton('defDown','Download one table'),
                                    # br(),
                                    shiny::fileInput("trshUp", "Upload treshold table",
                                                     multiple = FALSE,

                                                     accept = ".stk"),

                                    shiny::downloadButton('trshDown','Download treshold table'),
                                    width = 6,
                                    height = NULL
                                  ),
                                  shinydashboard::box(
                                    shiny::plotOutput("plotPieCount",
                                                      click= NULL,
                                                      hover =  (NULL)),
                                    width = 3,
                                    height = NULL
                                  ),
                                  shinydashboard::box(
                                    shiny::plotOutput("plotPieArea",
                                                      click= NULL,
                                                      hover =  (NULL)),
                                    width = 3,
                                    height = NULL
                                  )
                                )
        )
      )
    )
  )



  shiny::shinyApp(ui,server,)
}
